//--------------------------------------------------------------------------------
// Auto-generated by Migen (a5cc037) & LiteX (8eecbd7b) on 2020-12-16 23:23:19
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x82000000L
#endif

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x0L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x0L);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x4L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x8L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x8L);
}

/* uart_phy */
#define CSR_UART_PHY_BASE (CSR_BASE + 0x1000L)
#define CSR_UART_PHY_TUNING_WORD_ADDR (CSR_BASE + 0x1000L)
#define CSR_UART_PHY_TUNING_WORD_SIZE 1
static inline uint32_t uart_phy_tuning_word_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}
static inline void uart_phy_tuning_word_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1000L);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x1800L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x1800L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1800L);
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x1804L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x1804L);
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x1808L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x1808L);
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x180cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x180cL);
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x1810L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x1810L);
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1810L);
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x1814L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x1814L);
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1814L);
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x1818L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x1818L);
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x181cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x181cL);
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x2000L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x2000L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x2004L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple(CSR_BASE + 0x2004L);
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2004L);
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x2008L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x2008L);
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2008L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x200cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x200cL);
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x200cL);
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x2010L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x2010L);
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x2014L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x2014L);
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x2018L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x2018L);
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2018L);
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x201cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x201cL);
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x201cL);
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1

/* leds */
#define CSR_LEDS_BASE (CSR_BASE + 0x2800L)
#define CSR_LEDS_OUT_ADDR (CSR_BASE + 0x2800L)
#define CSR_LEDS_OUT_SIZE 1
static inline uint32_t leds_out_read(void) {
	return csr_read_simple(CSR_BASE + 0x2800L);
}
static inline void leds_out_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2800L);
}

/* switchs */
#define CSR_SWITCHS_BASE (CSR_BASE + 0x3000L)
#define CSR_SWITCHS_IN_ADDR (CSR_BASE + 0x3000L)
#define CSR_SWITCHS_IN_SIZE 1
static inline uint32_t switchs_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}

/* buttons */
#define CSR_BUTTONS_BASE (CSR_BASE + 0x3800L)
#define CSR_BUTTONS_IN_ADDR (CSR_BASE + 0x3800L)
#define CSR_BUTTONS_IN_SIZE 1
static inline uint32_t buttons_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}

/* display */
#define CSR_DISPLAY_BASE (CSR_BASE + 0x4000L)
#define CSR_DISPLAY_DIG_0_ADDR (CSR_BASE + 0x4000L)
#define CSR_DISPLAY_DIG_0_SIZE 1
static inline uint32_t display_dig_0_read(void) {
	return csr_read_simple(CSR_BASE + 0x4000L);
}
static inline void display_dig_0_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4000L);
}
#define CSR_DISPLAY_DIG_1_ADDR (CSR_BASE + 0x4004L)
#define CSR_DISPLAY_DIG_1_SIZE 1
static inline uint32_t display_dig_1_read(void) {
	return csr_read_simple(CSR_BASE + 0x4004L);
}
static inline void display_dig_1_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4004L);
}
#define CSR_DISPLAY_DIG_2_ADDR (CSR_BASE + 0x4008L)
#define CSR_DISPLAY_DIG_2_SIZE 1
static inline uint32_t display_dig_2_read(void) {
	return csr_read_simple(CSR_BASE + 0x4008L);
}
static inline void display_dig_2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4008L);
}
#define CSR_DISPLAY_DIG_3_ADDR (CSR_BASE + 0x400cL)
#define CSR_DISPLAY_DIG_3_SIZE 1
static inline uint32_t display_dig_3_read(void) {
	return csr_read_simple(CSR_BASE + 0x400cL);
}
static inline void display_dig_3_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x400cL);
}
#define CSR_DISPLAY_DIG_4_ADDR (CSR_BASE + 0x4010L)
#define CSR_DISPLAY_DIG_4_SIZE 1
static inline uint32_t display_dig_4_read(void) {
	return csr_read_simple(CSR_BASE + 0x4010L);
}
static inline void display_dig_4_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4010L);
}
#define CSR_DISPLAY_DIG_5_ADDR (CSR_BASE + 0x4014L)
#define CSR_DISPLAY_DIG_5_SIZE 1
static inline uint32_t display_dig_5_read(void) {
	return csr_read_simple(CSR_BASE + 0x4014L);
}
static inline void display_dig_5_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4014L);
}
#define CSR_DISPLAY_DIG_6_ADDR (CSR_BASE + 0x4018L)
#define CSR_DISPLAY_DIG_6_SIZE 1
static inline uint32_t display_dig_6_read(void) {
	return csr_read_simple(CSR_BASE + 0x4018L);
}
static inline void display_dig_6_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4018L);
}
#define CSR_DISPLAY_DIG_7_ADDR (CSR_BASE + 0x401cL)
#define CSR_DISPLAY_DIG_7_SIZE 1
static inline uint32_t display_dig_7_read(void) {
	return csr_read_simple(CSR_BASE + 0x401cL);
}
static inline void display_dig_7_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x401cL);
}

/* camara_cntrl */
#define CSR_CAMARA_CNTRL_BASE (CSR_BASE + 0x4800L)
#define CSR_CAMARA_CNTRL_COLOR_ADDR (CSR_BASE + 0x4800L)
#define CSR_CAMARA_CNTRL_COLOR_SIZE 1
static inline uint32_t camara_cntrl_color_read(void) {
	return csr_read_simple(CSR_BASE + 0x4800L);
}
#define CSR_CAMARA_CNTRL_FIGURE_ADDR (CSR_BASE + 0x4804L)
#define CSR_CAMARA_CNTRL_FIGURE_SIZE 1
static inline uint32_t camara_cntrl_figure_read(void) {
	return csr_read_simple(CSR_BASE + 0x4804L);
}
#define CSR_CAMARA_CNTRL_DONE_ADDR (CSR_BASE + 0x4808L)
#define CSR_CAMARA_CNTRL_DONE_SIZE 1
static inline uint32_t camara_cntrl_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x4808L);
}
#define CSR_CAMARA_CNTRL_INIT_PROCESAMIENTO_ADDR (CSR_BASE + 0x480cL)
#define CSR_CAMARA_CNTRL_INIT_PROCESAMIENTO_SIZE 1
static inline uint32_t camara_cntrl_init_procesamiento_read(void) {
	return csr_read_simple(CSR_BASE + 0x480cL);
}
static inline void camara_cntrl_init_procesamiento_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x480cL);
}
#define CSR_CAMARA_CNTRL_EV_STATUS_ADDR (CSR_BASE + 0x4810L)
#define CSR_CAMARA_CNTRL_EV_STATUS_SIZE 1
static inline uint32_t camara_cntrl_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x4810L);
}
#define CSR_CAMARA_CNTRL_EV_STATUS_OK_OFFSET 0
#define CSR_CAMARA_CNTRL_EV_STATUS_OK_SIZE 1
#define CSR_CAMARA_CNTRL_EV_PENDING_ADDR (CSR_BASE + 0x4814L)
#define CSR_CAMARA_CNTRL_EV_PENDING_SIZE 1
static inline uint32_t camara_cntrl_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x4814L);
}
static inline void camara_cntrl_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4814L);
}
#define CSR_CAMARA_CNTRL_EV_PENDING_OK_OFFSET 0
#define CSR_CAMARA_CNTRL_EV_PENDING_OK_SIZE 1
#define CSR_CAMARA_CNTRL_EV_ENABLE_ADDR (CSR_BASE + 0x4818L)
#define CSR_CAMARA_CNTRL_EV_ENABLE_SIZE 1
static inline uint32_t camara_cntrl_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x4818L);
}
static inline void camara_cntrl_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4818L);
}
#define CSR_CAMARA_CNTRL_EV_ENABLE_OK_OFFSET 0
#define CSR_CAMARA_CNTRL_EV_ENABLE_OK_SIZE 1

/* radar_cntrl */
#define CSR_RADAR_CNTRL_BASE (CSR_BASE + 0x5000L)
#define CSR_RADAR_CNTRL_DISTANCE_ADDR (CSR_BASE + 0x5000L)
#define CSR_RADAR_CNTRL_DISTANCE_SIZE 1
static inline uint32_t radar_cntrl_distance_read(void) {
	return csr_read_simple(CSR_BASE + 0x5000L);
}
#define CSR_RADAR_CNTRL_BOTON_CAMBIAR_GRADOS_ADDR (CSR_BASE + 0x5004L)
#define CSR_RADAR_CNTRL_BOTON_CAMBIAR_GRADOS_SIZE 1
static inline uint32_t radar_cntrl_boton_cambiar_grados_read(void) {
	return csr_read_simple(CSR_BASE + 0x5004L);
}
static inline void radar_cntrl_boton_cambiar_grados_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5004L);
}
#define CSR_RADAR_CNTRL_ULTRA_ADDR (CSR_BASE + 0x5008L)
#define CSR_RADAR_CNTRL_ULTRA_SIZE 1
static inline uint32_t radar_cntrl_ultra_read(void) {
	return csr_read_simple(CSR_BASE + 0x5008L);
}
static inline void radar_cntrl_ultra_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5008L);
}

/* motor_cntrl */
#define CSR_MOTOR_CNTRL_BASE (CSR_BASE + 0x5800L)
#define CSR_MOTOR_CNTRL_DIRECCION_ADDR (CSR_BASE + 0x5800L)
#define CSR_MOTOR_CNTRL_DIRECCION_SIZE 1
static inline uint32_t motor_cntrl_direccion_read(void) {
	return csr_read_simple(CSR_BASE + 0x5800L);
}
static inline void motor_cntrl_direccion_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5800L);
}
#define CSR_MOTOR_CNTRL_DIRECCION2_ADDR (CSR_BASE + 0x5804L)
#define CSR_MOTOR_CNTRL_DIRECCION2_SIZE 1
static inline uint32_t motor_cntrl_direccion2_read(void) {
	return csr_read_simple(CSR_BASE + 0x5804L);
}
static inline void motor_cntrl_direccion2_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5804L);
}

/* infra_cntrl */
#define CSR_INFRA_CNTRL_BASE (CSR_BASE + 0x6000L)
#define CSR_INFRA_CNTRL_SALIDA_ADDR (CSR_BASE + 0x6000L)
#define CSR_INFRA_CNTRL_SALIDA_SIZE 1
static inline uint32_t infra_cntrl_salida_read(void) {
	return csr_read_simple(CSR_BASE + 0x6000L);
}
#define CSR_INFRA_CNTRL_SALIDA1_ADDR (CSR_BASE + 0x6004L)
#define CSR_INFRA_CNTRL_SALIDA1_SIZE 1
static inline uint32_t infra_cntrl_salida1_read(void) {
	return csr_read_simple(CSR_BASE + 0x6004L);
}
#define CSR_INFRA_CNTRL_SALIDA2_ADDR (CSR_BASE + 0x6008L)
#define CSR_INFRA_CNTRL_SALIDA2_SIZE 1
static inline uint32_t infra_cntrl_salida2_read(void) {
	return csr_read_simple(CSR_BASE + 0x6008L);
}

#endif
