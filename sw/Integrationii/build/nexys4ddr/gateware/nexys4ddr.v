//--------------------------------------------------------------------------------
// Auto-generated by Migen (a5cc037) & LiteX (8eecbd7b) on 2020-12-16 23:23:23
//--------------------------------------------------------------------------------
module nexys4ddr(
	output reg serial_tx,
	input wire serial_rx,
	input wire clk,
	input wire cpu_reset,
	output wire led0,
	output wire led1,
	output wire led2,
	output wire led3,
	output wire led4,
	output wire led5,
	output wire led6,
	output wire led7,
	output wire led8,
	output wire led9,
	input wire sw0,
	input wire sw1,
	input wire sw2,
	input wire sw3,
	input wire sw4,
	input wire sw5,
	input wire sw6,
	input wire sw7,
	input wire btnc,
	input wire btnr,
	input wire btnl,
	output wire display_segment0,
	output wire display_segment1,
	output wire display_segment2,
	output wire display_segment3,
	output wire display_segment4,
	output wire display_segment5,
	output wire display_segment6,
	output wire display_segment7,
	output wire display_digit0,
	output wire display_digit1,
	output wire display_digit2,
	output wire display_digit3,
	output wire display_digit4,
	output wire display_digit5,
	output wire display_digit6,
	output wire display_digit7,
	output wire vga_red0,
	output wire vga_red1,
	output wire vga_red2,
	output wire vga_red3,
	output wire vga_green0,
	output wire vga_green1,
	output wire vga_green2,
	output wire vga_green3,
	output wire vga_blue0,
	output wire vga_blue1,
	output wire vga_blue2,
	output wire vga_blue3,
	output wire vsync,
	output wire hsync,
	input wire cam_data_in0,
	input wire cam_data_in1,
	input wire cam_data_in2,
	input wire cam_data_in3,
	input wire cam_data_in4,
	input wire cam_data_in5,
	input wire cam_data_in6,
	input wire cam_data_in7,
	output wire cam_xclk,
	output wire cam_pwdn,
	input wire cam_pclk,
	input wire cam_vsync,
	input wire cam_href,
	input wire echo,
	output wire done,
	output wire trigger,
	output wire PWM,
	output wire A,
	output wire B,
	output wire C,
	output wire D,
	output wire A1,
	output wire B1,
	output wire C1,
	output wire D1,
	input wire entrada,
	input wire entrada1,
	input wire entrada2
);

reg soccontroller_reset_storage = 1'd0;
reg soccontroller_reset_re = 1'd0;
reg [31:0] soccontroller_scratch_storage = 32'd305419896;
reg soccontroller_scratch_re = 1'd0;
wire [31:0] soccontroller_bus_errors_status;
wire soccontroller_bus_errors_we;
reg soccontroller_bus_errors_re = 1'd0;
wire soccontroller_reset;
wire soccontroller_bus_error;
reg [31:0] soccontroller_bus_errors = 32'd0;
wire picorv32_trap;
wire picorv32_reset;
reg [31:0] picorv32_interrupt = 32'd0;
wire [29:0] picorv32_idbus_adr;
wire [31:0] picorv32_idbus_dat_w;
wire [31:0] picorv32_idbus_dat_r;
wire [3:0] picorv32_idbus_sel;
wire picorv32_idbus_cyc;
wire picorv32_idbus_stb;
wire picorv32_idbus_ack;
wire picorv32_idbus_we;
wire [2:0] picorv32_idbus_cti;
wire [1:0] picorv32_idbus_bte;
wire picorv32_idbus_err;
wire picorv32_mem_valid;
wire picorv32_mem_instr;
wire picorv32_mem_ready;
wire [31:0] picorv32_mem_addr;
wire [31:0] picorv32_mem_wdata;
wire [3:0] picorv32_mem_wstrb;
wire [31:0] picorv32_mem_rdata;
wire picorv320;
wire picorv321;
wire [31:0] picorv322;
wire [31:0] picorv323;
wire [3:0] picorv324;
wire picorv325;
wire [31:0] picorv326;
wire [31:0] picorv327;
wire [31:0] picorv328;
wire [31:0] picorv329;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg ram_bus_err = 1'd0;
wire [12:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg interface0_ram_bus_err = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg interface1_ram_bus_err = 1'd0;
wire [11:0] sram1_adr;
wire [31:0] sram1_dat_r;
reg [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
reg [31:0] uart_phy_storage = 32'd4947802;
reg uart_phy_re = 1'd0;
wire uart_phy_sink_valid;
reg uart_phy_sink_ready = 1'd0;
wire uart_phy_sink_first;
wire uart_phy_sink_last;
wire [7:0] uart_phy_sink_payload_data;
reg uart_phy_tx_clken = 1'd0;
reg [31:0] uart_phy_tx_clkphase = 32'd0;
reg [7:0] uart_phy_tx_reg = 8'd0;
reg [3:0] uart_phy_tx_bitcount = 4'd0;
reg uart_phy_tx_busy = 1'd0;
reg uart_phy_source_valid = 1'd0;
wire uart_phy_source_ready;
reg uart_phy_source_first = 1'd0;
reg uart_phy_source_last = 1'd0;
reg [7:0] uart_phy_source_payload_data = 8'd0;
reg uart_phy_rx_clken = 1'd0;
reg [31:0] uart_phy_rx_clkphase = 32'd0;
wire uart_phy_rx;
reg uart_phy_rx_r = 1'd0;
reg [7:0] uart_phy_rx_reg = 8'd0;
reg [3:0] uart_phy_rx_bitcount = 4'd0;
reg uart_phy_rx_busy = 1'd0;
wire uart_rxtx_re;
wire [7:0] uart_rxtx_r;
wire uart_rxtx_we;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg uart_tx_clear = 1'd0;
reg uart_tx_old_trigger = 1'd0;
wire uart_rx_status;
reg uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg uart_rx_clear = 1'd0;
reg uart_rx_old_trigger = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg uart_pending_re = 1'd0;
reg [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg [1:0] uart_enable_storage = 2'd0;
reg uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg uart_tx_fifo_sink_first = 1'd0;
reg uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg [4:0] uart_tx_fifo_level0 = 5'd0;
reg uart_tx_fifo_replace = 1'd0;
reg [3:0] uart_tx_fifo_produce = 4'd0;
reg [3:0] uart_tx_fifo_consume = 4'd0;
reg [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg [4:0] uart_rx_fifo_level0 = 5'd0;
reg uart_rx_fifo_replace = 1'd0;
reg [3:0] uart_rx_fifo_produce = 4'd0;
reg [3:0] uart_rx_fifo_consume = 4'd0;
reg [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg uart_reset = 1'd0;
reg [31:0] timer_load_storage = 32'd0;
reg timer_load_re = 1'd0;
reg [31:0] timer_reload_storage = 32'd0;
reg timer_reload_re = 1'd0;
reg timer_en_storage = 1'd0;
reg timer_en_re = 1'd0;
reg timer_update_value_storage = 1'd0;
reg timer_update_value_re = 1'd0;
reg [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg timer_zero_clear = 1'd0;
reg timer_zero_old_trigger = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg timer_pending_re = 1'd0;
reg timer_pending_r = 1'd0;
wire timer_zero2;
reg timer_enable_storage = 1'd0;
reg timer_enable_re = 1'd0;
reg [31:0] timer_value = 32'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
reg [9:0] leds_storage = 10'd0;
reg leds_re = 1'd0;
wire [7:0] switchs_status;
wire switchs_we;
reg switchs_re = 1'd0;
wire [2:0] buttons_status;
wire buttons_we;
reg buttons_re = 1'd0;
reg [2:0] dgt_count = 3'd0;
reg dgt_tick = 1'd0;
reg [17:0] dgt_tick_count = 18'd0;
wire [7:0] displays0;
wire [7:0] displays1;
wire [7:0] displays2;
wire [7:0] displays3;
wire [7:0] displays4;
wire [7:0] displays5;
wire [7:0] displays6;
wire [7:0] displays7;
reg [7:0] dig_0_storage = 8'd0;
reg dig_0_re = 1'd0;
reg [7:0] dig_1_storage = 8'd0;
reg dig_1_re = 1'd0;
reg [7:0] dig_2_storage = 8'd0;
reg dig_2_re = 1'd0;
reg [7:0] dig_3_storage = 8'd0;
reg dig_3_re = 1'd0;
reg [7:0] dig_4_storage = 8'd0;
reg dig_4_re = 1'd0;
reg [7:0] dig_5_storage = 8'd0;
reg dig_5_re = 1'd0;
reg [7:0] dig_6_storage = 8'd0;
reg dig_6_re = 1'd0;
reg [7:0] dig_7_storage = 8'd0;
reg dig_7_re = 1'd0;
wire [1:0] color_status;
wire color_we;
reg color_re = 1'd0;
wire [1:0] figure_status;
wire figure_we;
reg figure_re = 1'd0;
wire done_status;
wire done_we;
reg done_re = 1'd0;
reg init_procesamiento_storage = 1'd0;
reg init_procesamiento_re = 1'd0;
wire irq;
wire ok_status;
reg ok_pending = 1'd0;
reg ok_trigger = 1'd0;
reg ok_clear = 1'd0;
reg ok_old_trigger = 1'd0;
wire ok0;
wire status_status;
wire status_we;
reg status_re = 1'd0;
wire ok1;
wire pending_status;
wire pending_we;
reg pending_re = 1'd0;
reg pending_r = 1'd0;
wire ok2;
reg enable_storage = 1'd0;
reg enable_re = 1'd0;
wire [15:0] distance_status;
wire distance_we;
reg distance_re = 1'd0;
reg [1:0] boton_cambiar_grados_storage = 2'd0;
reg boton_cambiar_grados_re = 1'd0;
reg ultra_storage = 1'd0;
reg ultra_re = 1'd0;
reg [1:0] direccion_storage = 2'd0;
reg direccion_re = 1'd0;
reg [1:0] direccion2_storage = 2'd0;
reg direccion2_re = 1'd0;
wire salida_status;
wire salida_we;
reg salida_re = 1'd0;
wire salida1_status;
wire salida1_we;
reg salida1_re = 1'd0;
wire salida2_status;
wire salida2_we;
reg salida2_re = 1'd0;
reg [13:0] basesoc_adr = 14'd0;
reg basesoc_we = 1'd0;
reg [31:0] basesoc_dat_w = 32'd0;
wire [31:0] basesoc_dat_r;
wire [29:0] basesoc_wishbone_adr;
wire [31:0] basesoc_wishbone_dat_w;
reg [31:0] basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_wishbone_sel;
wire basesoc_wishbone_cyc;
wire basesoc_wishbone_stb;
reg basesoc_wishbone_ack = 1'd0;
wire basesoc_wishbone_we;
wire [2:0] basesoc_wishbone_cti;
wire [1:0] basesoc_wishbone_bte;
reg basesoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire request;
wire grant;
reg [3:0] slave_sel = 4'd0;
reg [3:0] slave_sel_r = 4'd0;
reg error = 1'd0;
wire wait_1;
wire done_1;
reg [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg [31:0] interface0_bank_bus_dat_r = 32'd0;
wire csrbank0_in_re;
wire [2:0] csrbank0_in_r;
wire csrbank0_in_we;
wire [2:0] csrbank0_in_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg [31:0] interface1_bank_bus_dat_r = 32'd0;
wire csrbank1_color_re;
wire [1:0] csrbank1_color_r;
wire csrbank1_color_we;
wire [1:0] csrbank1_color_w;
wire csrbank1_figure_re;
wire [1:0] csrbank1_figure_r;
wire csrbank1_figure_we;
wire [1:0] csrbank1_figure_w;
wire csrbank1_done_re;
wire csrbank1_done_r;
wire csrbank1_done_we;
wire csrbank1_done_w;
wire csrbank1_init_procesamiento0_re;
wire csrbank1_init_procesamiento0_r;
wire csrbank1_init_procesamiento0_we;
wire csrbank1_init_procesamiento0_w;
wire csrbank1_ev_status_re;
wire csrbank1_ev_status_r;
wire csrbank1_ev_status_we;
wire csrbank1_ev_status_w;
wire csrbank1_ev_pending_re;
wire csrbank1_ev_pending_r;
wire csrbank1_ev_pending_we;
wire csrbank1_ev_pending_w;
wire csrbank1_ev_enable0_re;
wire csrbank1_ev_enable0_r;
wire csrbank1_ev_enable0_we;
wire csrbank1_ev_enable0_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg [31:0] interface2_bank_bus_dat_r = 32'd0;
wire csrbank2_reset0_re;
wire csrbank2_reset0_r;
wire csrbank2_reset0_we;
wire csrbank2_reset0_w;
wire csrbank2_scratch0_re;
wire [31:0] csrbank2_scratch0_r;
wire csrbank2_scratch0_we;
wire [31:0] csrbank2_scratch0_w;
wire csrbank2_bus_errors_re;
wire [31:0] csrbank2_bus_errors_r;
wire csrbank2_bus_errors_we;
wire [31:0] csrbank2_bus_errors_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg [31:0] interface3_bank_bus_dat_r = 32'd0;
wire csrbank3_dig_00_re;
wire [7:0] csrbank3_dig_00_r;
wire csrbank3_dig_00_we;
wire [7:0] csrbank3_dig_00_w;
wire csrbank3_dig_10_re;
wire [7:0] csrbank3_dig_10_r;
wire csrbank3_dig_10_we;
wire [7:0] csrbank3_dig_10_w;
wire csrbank3_dig_20_re;
wire [7:0] csrbank3_dig_20_r;
wire csrbank3_dig_20_we;
wire [7:0] csrbank3_dig_20_w;
wire csrbank3_dig_30_re;
wire [7:0] csrbank3_dig_30_r;
wire csrbank3_dig_30_we;
wire [7:0] csrbank3_dig_30_w;
wire csrbank3_dig_40_re;
wire [7:0] csrbank3_dig_40_r;
wire csrbank3_dig_40_we;
wire [7:0] csrbank3_dig_40_w;
wire csrbank3_dig_50_re;
wire [7:0] csrbank3_dig_50_r;
wire csrbank3_dig_50_we;
wire [7:0] csrbank3_dig_50_w;
wire csrbank3_dig_60_re;
wire [7:0] csrbank3_dig_60_r;
wire csrbank3_dig_60_we;
wire [7:0] csrbank3_dig_60_w;
wire csrbank3_dig_70_re;
wire [7:0] csrbank3_dig_70_r;
wire csrbank3_dig_70_we;
wire [7:0] csrbank3_dig_70_w;
wire csrbank3_sel;
wire [13:0] interface4_bank_bus_adr;
wire interface4_bank_bus_we;
wire [31:0] interface4_bank_bus_dat_w;
reg [31:0] interface4_bank_bus_dat_r = 32'd0;
wire csrbank4_salida_re;
wire csrbank4_salida_r;
wire csrbank4_salida_we;
wire csrbank4_salida_w;
wire csrbank4_salida1_re;
wire csrbank4_salida1_r;
wire csrbank4_salida1_we;
wire csrbank4_salida1_w;
wire csrbank4_salida2_re;
wire csrbank4_salida2_r;
wire csrbank4_salida2_we;
wire csrbank4_salida2_w;
wire csrbank4_sel;
wire [13:0] interface5_bank_bus_adr;
wire interface5_bank_bus_we;
wire [31:0] interface5_bank_bus_dat_w;
reg [31:0] interface5_bank_bus_dat_r = 32'd0;
wire csrbank5_out0_re;
wire [9:0] csrbank5_out0_r;
wire csrbank5_out0_we;
wire [9:0] csrbank5_out0_w;
wire csrbank5_sel;
wire [13:0] interface6_bank_bus_adr;
wire interface6_bank_bus_we;
wire [31:0] interface6_bank_bus_dat_w;
reg [31:0] interface6_bank_bus_dat_r = 32'd0;
wire csrbank6_direccion0_re;
wire [1:0] csrbank6_direccion0_r;
wire csrbank6_direccion0_we;
wire [1:0] csrbank6_direccion0_w;
wire csrbank6_direccion20_re;
wire [1:0] csrbank6_direccion20_r;
wire csrbank6_direccion20_we;
wire [1:0] csrbank6_direccion20_w;
wire csrbank6_sel;
wire [13:0] interface7_bank_bus_adr;
wire interface7_bank_bus_we;
wire [31:0] interface7_bank_bus_dat_w;
reg [31:0] interface7_bank_bus_dat_r = 32'd0;
wire csrbank7_distance_re;
wire [15:0] csrbank7_distance_r;
wire csrbank7_distance_we;
wire [15:0] csrbank7_distance_w;
wire csrbank7_boton_cambiar_grados0_re;
wire [1:0] csrbank7_boton_cambiar_grados0_r;
wire csrbank7_boton_cambiar_grados0_we;
wire [1:0] csrbank7_boton_cambiar_grados0_w;
wire csrbank7_ultra0_re;
wire csrbank7_ultra0_r;
wire csrbank7_ultra0_we;
wire csrbank7_ultra0_w;
wire csrbank7_sel;
wire [13:0] interface8_bank_bus_adr;
wire interface8_bank_bus_we;
wire [31:0] interface8_bank_bus_dat_w;
reg [31:0] interface8_bank_bus_dat_r = 32'd0;
wire csrbank8_in_re;
wire [7:0] csrbank8_in_r;
wire csrbank8_in_we;
wire [7:0] csrbank8_in_w;
wire csrbank8_sel;
wire [13:0] interface9_bank_bus_adr;
wire interface9_bank_bus_we;
wire [31:0] interface9_bank_bus_dat_w;
reg [31:0] interface9_bank_bus_dat_r = 32'd0;
wire csrbank9_load0_re;
wire [31:0] csrbank9_load0_r;
wire csrbank9_load0_we;
wire [31:0] csrbank9_load0_w;
wire csrbank9_reload0_re;
wire [31:0] csrbank9_reload0_r;
wire csrbank9_reload0_we;
wire [31:0] csrbank9_reload0_w;
wire csrbank9_en0_re;
wire csrbank9_en0_r;
wire csrbank9_en0_we;
wire csrbank9_en0_w;
wire csrbank9_update_value0_re;
wire csrbank9_update_value0_r;
wire csrbank9_update_value0_we;
wire csrbank9_update_value0_w;
wire csrbank9_value_re;
wire [31:0] csrbank9_value_r;
wire csrbank9_value_we;
wire [31:0] csrbank9_value_w;
wire csrbank9_ev_status_re;
wire csrbank9_ev_status_r;
wire csrbank9_ev_status_we;
wire csrbank9_ev_status_w;
wire csrbank9_ev_pending_re;
wire csrbank9_ev_pending_r;
wire csrbank9_ev_pending_we;
wire csrbank9_ev_pending_w;
wire csrbank9_ev_enable0_re;
wire csrbank9_ev_enable0_r;
wire csrbank9_ev_enable0_we;
wire csrbank9_ev_enable0_w;
wire csrbank9_sel;
wire [13:0] interface10_bank_bus_adr;
wire interface10_bank_bus_we;
wire [31:0] interface10_bank_bus_dat_w;
reg [31:0] interface10_bank_bus_dat_r = 32'd0;
wire csrbank10_txfull_re;
wire csrbank10_txfull_r;
wire csrbank10_txfull_we;
wire csrbank10_txfull_w;
wire csrbank10_rxempty_re;
wire csrbank10_rxempty_r;
wire csrbank10_rxempty_we;
wire csrbank10_rxempty_w;
wire csrbank10_ev_status_re;
wire [1:0] csrbank10_ev_status_r;
wire csrbank10_ev_status_we;
wire [1:0] csrbank10_ev_status_w;
wire csrbank10_ev_pending_re;
wire [1:0] csrbank10_ev_pending_r;
wire csrbank10_ev_pending_we;
wire [1:0] csrbank10_ev_pending_w;
wire csrbank10_ev_enable0_re;
wire [1:0] csrbank10_ev_enable0_r;
wire csrbank10_ev_enable0_we;
wire [1:0] csrbank10_ev_enable0_w;
wire csrbank10_txempty_re;
wire csrbank10_txempty_r;
wire csrbank10_txempty_we;
wire csrbank10_txempty_w;
wire csrbank10_rxfull_re;
wire csrbank10_rxfull_r;
wire csrbank10_rxfull_we;
wire csrbank10_rxfull_w;
wire csrbank10_sel;
wire [13:0] interface11_bank_bus_adr;
wire interface11_bank_bus_we;
wire [31:0] interface11_bank_bus_dat_w;
reg [31:0] interface11_bank_bus_dat_r = 32'd0;
wire csrbank11_tuning_word0_re;
wire [31:0] csrbank11_tuning_word0_r;
wire csrbank11_tuning_word0_we;
wire [31:0] csrbank11_tuning_word0_w;
wire csrbank11_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg state = 1'd0;
reg next_state = 1'd0;
reg [7:0] array_muxed0 = 8'd0;
reg [29:0] array_muxed1 = 30'd0;
reg [31:0] array_muxed2 = 32'd0;
reg [3:0] array_muxed3 = 4'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg array_muxed6 = 1'd0;
reg [2:0] array_muxed7 = 3'd0;
reg [1:0] array_muxed8 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [7:0] xilinxmultiregimpl1_regs0 = 8'd0;
(* async_reg = "true", dont_touch = "true" *) reg [7:0] xilinxmultiregimpl1_regs1 = 8'd0;
wire xilinxmultiregimpl1;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl2_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl2_regs1 = 3'd0;
wire xilinxmultiregimpl2;

assign picorv32_reset = soccontroller_reset;
assign soccontroller_bus_error = error;
always @(*) begin
	picorv32_interrupt <= 32'd0;
	picorv32_interrupt[2] <= irq;
	picorv32_interrupt[1] <= timer_irq;
	picorv32_interrupt[0] <= uart_irq;
end
assign soccontroller_reset = soccontroller_reset_re;
assign soccontroller_bus_errors_status = soccontroller_bus_errors;
assign picorv32_idbus_adr = picorv32_mem_addr[31:2];
assign picorv32_idbus_dat_w = picorv32_mem_wdata;
assign picorv32_idbus_we = (picorv32_mem_wstrb != 1'd0);
assign picorv32_idbus_sel = picorv32_mem_wstrb;
assign picorv32_idbus_cyc = picorv32_mem_valid;
assign picorv32_idbus_stb = picorv32_mem_valid;
assign picorv32_idbus_cti = 1'd0;
assign picorv32_idbus_bte = 1'd0;
assign picorv32_mem_ready = picorv32_idbus_ack;
assign picorv32_mem_rdata = picorv32_idbus_dat_r;
assign adr = ram_bus_adr[12:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[11:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
assign uart_uart_sink_valid = uart_phy_source_valid;
assign uart_phy_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = uart_phy_source_first;
assign uart_uart_sink_last = uart_phy_source_last;
assign uart_uart_sink_payload_data = uart_phy_source_payload_data;
assign uart_phy_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = uart_phy_sink_ready;
assign uart_phy_sink_first = uart_uart_source_first;
assign uart_phy_sink_last = uart_uart_source_last;
assign uart_phy_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_tx_trigger = (~uart_tx_fifo_sink_ready);
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rx_trigger = (~uart_rx_fifo_source_valid);
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value != 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk = clk;
assign por_clk = clk;
assign sys_rst = int_rst;
assign {led9, led8, led7, led6, led5, led4, led3, led2, led1, led0} = leds_storage;
assign displays0 = dig_0_storage;
assign displays1 = dig_1_storage;
assign displays2 = dig_2_storage;
assign displays3 = dig_3_storage;
assign displays4 = dig_4_storage;
assign displays5 = dig_5_storage;
assign displays6 = dig_6_storage;
assign displays7 = dig_7_storage;
assign {display_digit7, display_digit6, display_digit5, display_digit4, display_digit3, display_digit2, display_digit1, display_digit0} = (~(1'd1 <<< dgt_count));
assign {display_segment7, display_segment6, display_segment5, display_segment4, display_segment3, display_segment2, display_segment1, display_segment0} = (~array_muxed0);
assign ok0 = ok_status;
assign ok1 = ok_pending;
always @(*) begin
	ok_clear <= 1'd0;
	if ((pending_re & pending_r)) begin
		ok_clear <= 1'd1;
	end
end
assign irq = (pending_status & enable_storage);
assign ok_status = ok_trigger;
always @(*) begin
	basesoc_wishbone_ack <= 1'd0;
	basesoc_dat_w <= 32'd0;
	next_state <= 1'd0;
	basesoc_wishbone_dat_r <= 32'd0;
	basesoc_adr <= 14'd0;
	basesoc_we <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			basesoc_wishbone_ack <= 1'd1;
			basesoc_wishbone_dat_r <= basesoc_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			basesoc_dat_w <= basesoc_wishbone_dat_w;
			if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
				basesoc_adr <= basesoc_wishbone_adr;
				basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign shared_adr = array_muxed1;
assign shared_dat_w = array_muxed2;
assign shared_sel = array_muxed3;
assign shared_cyc = array_muxed4;
assign shared_stb = array_muxed5;
assign shared_we = array_muxed6;
assign shared_cti = array_muxed7;
assign shared_bte = array_muxed8;
assign picorv32_idbus_dat_r = shared_dat_r;
assign picorv32_idbus_ack = (shared_ack & (grant == 1'd0));
assign picorv32_idbus_err = (shared_err & (grant == 1'd0));
assign request = {picorv32_idbus_cyc};
assign grant = 1'd0;
always @(*) begin
	slave_sel <= 4'd0;
	slave_sel[0] <= (shared_adr[29:13] == 1'd0);
	slave_sel[1] <= (shared_adr[29:11] == 12'd2048);
	slave_sel[2] <= (shared_adr[29:12] == 17'd65536);
	slave_sel[3] <= (shared_adr[29:14] == 16'd33280);
end
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | basesoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	shared_ack <= 1'd0;
	error <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | basesoc_wishbone_ack);
	shared_dat_r <= (((({32{slave_sel_r[0]}} & ram_bus_dat_r) | ({32{slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_wishbone_dat_r));
	if (done_1) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done_1 = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 3'd7);
assign csrbank0_in_r = interface0_bank_bus_dat_w[2:0];
assign csrbank0_in_re = ((csrbank0_sel & interface0_bank_bus_we) & (interface0_bank_bus_adr[0] == 1'd0));
assign csrbank0_in_we = ((csrbank0_sel & (~interface0_bank_bus_we)) & (interface0_bank_bus_adr[0] == 1'd0));
assign csrbank0_in_w = buttons_status[2:0];
assign buttons_we = csrbank0_in_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 4'd9);
assign csrbank1_color_r = interface1_bank_bus_dat_w[1:0];
assign csrbank1_color_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[2:0] == 1'd0));
assign csrbank1_color_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[2:0] == 1'd0));
assign csrbank1_figure_r = interface1_bank_bus_dat_w[1:0];
assign csrbank1_figure_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[2:0] == 1'd1));
assign csrbank1_figure_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[2:0] == 1'd1));
assign csrbank1_done_r = interface1_bank_bus_dat_w[0];
assign csrbank1_done_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[2:0] == 2'd2));
assign csrbank1_done_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[2:0] == 2'd2));
assign csrbank1_init_procesamiento0_r = interface1_bank_bus_dat_w[0];
assign csrbank1_init_procesamiento0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[2:0] == 2'd3));
assign csrbank1_init_procesamiento0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[2:0] == 2'd3));
assign csrbank1_ev_status_r = interface1_bank_bus_dat_w[0];
assign csrbank1_ev_status_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[2:0] == 3'd4));
assign csrbank1_ev_status_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[2:0] == 3'd4));
assign csrbank1_ev_pending_r = interface1_bank_bus_dat_w[0];
assign csrbank1_ev_pending_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[2:0] == 3'd5));
assign csrbank1_ev_pending_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[2:0] == 3'd5));
assign csrbank1_ev_enable0_r = interface1_bank_bus_dat_w[0];
assign csrbank1_ev_enable0_re = ((csrbank1_sel & interface1_bank_bus_we) & (interface1_bank_bus_adr[2:0] == 3'd6));
assign csrbank1_ev_enable0_we = ((csrbank1_sel & (~interface1_bank_bus_we)) & (interface1_bank_bus_adr[2:0] == 3'd6));
assign csrbank1_color_w = color_status[1:0];
assign color_we = csrbank1_color_we;
assign csrbank1_figure_w = figure_status[1:0];
assign figure_we = csrbank1_figure_we;
assign csrbank1_done_w = done_status;
assign done_we = csrbank1_done_we;
assign csrbank1_init_procesamiento0_w = init_procesamiento_storage;
assign status_status = ok0;
assign csrbank1_ev_status_w = status_status;
assign status_we = csrbank1_ev_status_we;
assign pending_status = ok1;
assign csrbank1_ev_pending_w = pending_status;
assign pending_we = csrbank1_ev_pending_we;
assign ok2 = enable_storage;
assign csrbank1_ev_enable0_w = enable_storage;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 1'd0);
assign csrbank2_reset0_r = interface2_bank_bus_dat_w[0];
assign csrbank2_reset0_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[1:0] == 1'd0));
assign csrbank2_reset0_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[1:0] == 1'd0));
assign csrbank2_scratch0_r = interface2_bank_bus_dat_w[31:0];
assign csrbank2_scratch0_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[1:0] == 1'd1));
assign csrbank2_scratch0_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[1:0] == 1'd1));
assign csrbank2_bus_errors_r = interface2_bank_bus_dat_w[31:0];
assign csrbank2_bus_errors_re = ((csrbank2_sel & interface2_bank_bus_we) & (interface2_bank_bus_adr[1:0] == 2'd2));
assign csrbank2_bus_errors_we = ((csrbank2_sel & (~interface2_bank_bus_we)) & (interface2_bank_bus_adr[1:0] == 2'd2));
assign csrbank2_reset0_w = soccontroller_reset_storage;
assign csrbank2_scratch0_w = soccontroller_scratch_storage[31:0];
assign csrbank2_bus_errors_w = soccontroller_bus_errors_status[31:0];
assign soccontroller_bus_errors_we = csrbank2_bus_errors_we;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 4'd8);
assign csrbank3_dig_00_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_00_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 1'd0));
assign csrbank3_dig_00_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 1'd0));
assign csrbank3_dig_10_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_10_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 1'd1));
assign csrbank3_dig_10_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 1'd1));
assign csrbank3_dig_20_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_20_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 2'd2));
assign csrbank3_dig_20_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 2'd2));
assign csrbank3_dig_30_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_30_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 2'd3));
assign csrbank3_dig_30_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 2'd3));
assign csrbank3_dig_40_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_40_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 3'd4));
assign csrbank3_dig_40_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 3'd4));
assign csrbank3_dig_50_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_50_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 3'd5));
assign csrbank3_dig_50_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 3'd5));
assign csrbank3_dig_60_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_60_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 3'd6));
assign csrbank3_dig_60_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 3'd6));
assign csrbank3_dig_70_r = interface3_bank_bus_dat_w[7:0];
assign csrbank3_dig_70_re = ((csrbank3_sel & interface3_bank_bus_we) & (interface3_bank_bus_adr[2:0] == 3'd7));
assign csrbank3_dig_70_we = ((csrbank3_sel & (~interface3_bank_bus_we)) & (interface3_bank_bus_adr[2:0] == 3'd7));
assign csrbank3_dig_00_w = dig_0_storage[7:0];
assign csrbank3_dig_10_w = dig_1_storage[7:0];
assign csrbank3_dig_20_w = dig_2_storage[7:0];
assign csrbank3_dig_30_w = dig_3_storage[7:0];
assign csrbank3_dig_40_w = dig_4_storage[7:0];
assign csrbank3_dig_50_w = dig_5_storage[7:0];
assign csrbank3_dig_60_w = dig_6_storage[7:0];
assign csrbank3_dig_70_w = dig_7_storage[7:0];
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 4'd12);
assign csrbank4_salida_r = interface4_bank_bus_dat_w[0];
assign csrbank4_salida_re = ((csrbank4_sel & interface4_bank_bus_we) & (interface4_bank_bus_adr[1:0] == 1'd0));
assign csrbank4_salida_we = ((csrbank4_sel & (~interface4_bank_bus_we)) & (interface4_bank_bus_adr[1:0] == 1'd0));
assign csrbank4_salida1_r = interface4_bank_bus_dat_w[0];
assign csrbank4_salida1_re = ((csrbank4_sel & interface4_bank_bus_we) & (interface4_bank_bus_adr[1:0] == 1'd1));
assign csrbank4_salida1_we = ((csrbank4_sel & (~interface4_bank_bus_we)) & (interface4_bank_bus_adr[1:0] == 1'd1));
assign csrbank4_salida2_r = interface4_bank_bus_dat_w[0];
assign csrbank4_salida2_re = ((csrbank4_sel & interface4_bank_bus_we) & (interface4_bank_bus_adr[1:0] == 2'd2));
assign csrbank4_salida2_we = ((csrbank4_sel & (~interface4_bank_bus_we)) & (interface4_bank_bus_adr[1:0] == 2'd2));
assign csrbank4_salida_w = salida_status;
assign salida_we = csrbank4_salida_we;
assign csrbank4_salida1_w = salida1_status;
assign salida1_we = csrbank4_salida1_we;
assign csrbank4_salida2_w = salida2_status;
assign salida2_we = csrbank4_salida2_we;
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 3'd5);
assign csrbank5_out0_r = interface5_bank_bus_dat_w[9:0];
assign csrbank5_out0_re = ((csrbank5_sel & interface5_bank_bus_we) & (interface5_bank_bus_adr[0] == 1'd0));
assign csrbank5_out0_we = ((csrbank5_sel & (~interface5_bank_bus_we)) & (interface5_bank_bus_adr[0] == 1'd0));
assign csrbank5_out0_w = leds_storage[9:0];
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 4'd11);
assign csrbank6_direccion0_r = interface6_bank_bus_dat_w[1:0];
assign csrbank6_direccion0_re = ((csrbank6_sel & interface6_bank_bus_we) & (interface6_bank_bus_adr[0] == 1'd0));
assign csrbank6_direccion0_we = ((csrbank6_sel & (~interface6_bank_bus_we)) & (interface6_bank_bus_adr[0] == 1'd0));
assign csrbank6_direccion20_r = interface6_bank_bus_dat_w[1:0];
assign csrbank6_direccion20_re = ((csrbank6_sel & interface6_bank_bus_we) & (interface6_bank_bus_adr[0] == 1'd1));
assign csrbank6_direccion20_we = ((csrbank6_sel & (~interface6_bank_bus_we)) & (interface6_bank_bus_adr[0] == 1'd1));
assign csrbank6_direccion0_w = direccion_storage[1:0];
assign csrbank6_direccion20_w = direccion2_storage[1:0];
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 4'd10);
assign csrbank7_distance_r = interface7_bank_bus_dat_w[15:0];
assign csrbank7_distance_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[1:0] == 1'd0));
assign csrbank7_distance_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[1:0] == 1'd0));
assign csrbank7_boton_cambiar_grados0_r = interface7_bank_bus_dat_w[1:0];
assign csrbank7_boton_cambiar_grados0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[1:0] == 1'd1));
assign csrbank7_boton_cambiar_grados0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[1:0] == 1'd1));
assign csrbank7_ultra0_r = interface7_bank_bus_dat_w[0];
assign csrbank7_ultra0_re = ((csrbank7_sel & interface7_bank_bus_we) & (interface7_bank_bus_adr[1:0] == 2'd2));
assign csrbank7_ultra0_we = ((csrbank7_sel & (~interface7_bank_bus_we)) & (interface7_bank_bus_adr[1:0] == 2'd2));
assign csrbank7_distance_w = distance_status[15:0];
assign distance_we = csrbank7_distance_we;
assign csrbank7_boton_cambiar_grados0_w = boton_cambiar_grados_storage[1:0];
assign csrbank7_ultra0_w = ultra_storage;
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 3'd6);
assign csrbank8_in_r = interface8_bank_bus_dat_w[7:0];
assign csrbank8_in_re = ((csrbank8_sel & interface8_bank_bus_we) & (interface8_bank_bus_adr[0] == 1'd0));
assign csrbank8_in_we = ((csrbank8_sel & (~interface8_bank_bus_we)) & (interface8_bank_bus_adr[0] == 1'd0));
assign csrbank8_in_w = switchs_status[7:0];
assign switchs_we = csrbank8_in_we;
assign csrbank9_sel = (interface9_bank_bus_adr[13:9] == 3'd4);
assign csrbank9_load0_r = interface9_bank_bus_dat_w[31:0];
assign csrbank9_load0_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 1'd0));
assign csrbank9_load0_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 1'd0));
assign csrbank9_reload0_r = interface9_bank_bus_dat_w[31:0];
assign csrbank9_reload0_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 1'd1));
assign csrbank9_reload0_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 1'd1));
assign csrbank9_en0_r = interface9_bank_bus_dat_w[0];
assign csrbank9_en0_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 2'd2));
assign csrbank9_en0_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 2'd2));
assign csrbank9_update_value0_r = interface9_bank_bus_dat_w[0];
assign csrbank9_update_value0_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 2'd3));
assign csrbank9_update_value0_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 2'd3));
assign csrbank9_value_r = interface9_bank_bus_dat_w[31:0];
assign csrbank9_value_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 3'd4));
assign csrbank9_value_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 3'd4));
assign csrbank9_ev_status_r = interface9_bank_bus_dat_w[0];
assign csrbank9_ev_status_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 3'd5));
assign csrbank9_ev_status_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 3'd5));
assign csrbank9_ev_pending_r = interface9_bank_bus_dat_w[0];
assign csrbank9_ev_pending_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 3'd6));
assign csrbank9_ev_pending_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 3'd6));
assign csrbank9_ev_enable0_r = interface9_bank_bus_dat_w[0];
assign csrbank9_ev_enable0_re = ((csrbank9_sel & interface9_bank_bus_we) & (interface9_bank_bus_adr[2:0] == 3'd7));
assign csrbank9_ev_enable0_we = ((csrbank9_sel & (~interface9_bank_bus_we)) & (interface9_bank_bus_adr[2:0] == 3'd7));
assign csrbank9_load0_w = timer_load_storage[31:0];
assign csrbank9_reload0_w = timer_reload_storage[31:0];
assign csrbank9_en0_w = timer_en_storage;
assign csrbank9_update_value0_w = timer_update_value_storage;
assign csrbank9_value_w = timer_value_status[31:0];
assign timer_value_we = csrbank9_value_we;
assign timer_status_status = timer_zero0;
assign csrbank9_ev_status_w = timer_status_status;
assign timer_status_we = csrbank9_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csrbank9_ev_pending_w = timer_pending_status;
assign timer_pending_we = csrbank9_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csrbank9_ev_enable0_w = timer_enable_storage;
assign csrbank10_sel = (interface10_bank_bus_adr[13:9] == 2'd3);
assign uart_rxtx_r = interface10_bank_bus_dat_w[7:0];
assign uart_rxtx_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 1'd0));
assign uart_rxtx_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 1'd0));
assign csrbank10_txfull_r = interface10_bank_bus_dat_w[0];
assign csrbank10_txfull_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 1'd1));
assign csrbank10_txfull_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 1'd1));
assign csrbank10_rxempty_r = interface10_bank_bus_dat_w[0];
assign csrbank10_rxempty_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 2'd2));
assign csrbank10_rxempty_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 2'd2));
assign csrbank10_ev_status_r = interface10_bank_bus_dat_w[1:0];
assign csrbank10_ev_status_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 2'd3));
assign csrbank10_ev_status_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 2'd3));
assign csrbank10_ev_pending_r = interface10_bank_bus_dat_w[1:0];
assign csrbank10_ev_pending_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 3'd4));
assign csrbank10_ev_pending_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 3'd4));
assign csrbank10_ev_enable0_r = interface10_bank_bus_dat_w[1:0];
assign csrbank10_ev_enable0_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 3'd5));
assign csrbank10_ev_enable0_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 3'd5));
assign csrbank10_txempty_r = interface10_bank_bus_dat_w[0];
assign csrbank10_txempty_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 3'd6));
assign csrbank10_txempty_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 3'd6));
assign csrbank10_rxfull_r = interface10_bank_bus_dat_w[0];
assign csrbank10_rxfull_re = ((csrbank10_sel & interface10_bank_bus_we) & (interface10_bank_bus_adr[2:0] == 3'd7));
assign csrbank10_rxfull_we = ((csrbank10_sel & (~interface10_bank_bus_we)) & (interface10_bank_bus_adr[2:0] == 3'd7));
assign csrbank10_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank10_txfull_we;
assign csrbank10_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank10_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign csrbank10_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csrbank10_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign csrbank10_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csrbank10_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank10_ev_enable0_w = uart_enable_storage[1:0];
assign csrbank10_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank10_txempty_we;
assign csrbank10_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank10_rxfull_we;
assign csrbank11_sel = (interface11_bank_bus_adr[13:9] == 2'd2);
assign csrbank11_tuning_word0_r = interface11_bank_bus_dat_w[31:0];
assign csrbank11_tuning_word0_re = ((csrbank11_sel & interface11_bank_bus_we) & (interface11_bank_bus_adr[0] == 1'd0));
assign csrbank11_tuning_word0_we = ((csrbank11_sel & (~interface11_bank_bus_we)) & (interface11_bank_bus_adr[0] == 1'd0));
assign csrbank11_tuning_word0_w = uart_phy_storage[31:0];
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface6_bank_bus_adr = csr_interconnect_adr;
assign interface7_bank_bus_adr = csr_interconnect_adr;
assign interface8_bank_bus_adr = csr_interconnect_adr;
assign interface9_bank_bus_adr = csr_interconnect_adr;
assign interface10_bank_bus_adr = csr_interconnect_adr;
assign interface11_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface6_bank_bus_we = csr_interconnect_we;
assign interface7_bank_bus_we = csr_interconnect_we;
assign interface8_bank_bus_we = csr_interconnect_we;
assign interface9_bank_bus_we = csr_interconnect_we;
assign interface10_bank_bus_we = csr_interconnect_we;
assign interface11_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface9_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface10_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface11_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r) | interface9_bank_bus_dat_r) | interface10_bank_bus_dat_r) | interface11_bank_bus_dat_r);
always @(*) begin
	array_muxed0 <= 8'd0;
	case (dgt_count)
		1'd0: begin
			array_muxed0 <= displays0;
		end
		1'd1: begin
			array_muxed0 <= displays1;
		end
		2'd2: begin
			array_muxed0 <= displays2;
		end
		2'd3: begin
			array_muxed0 <= displays3;
		end
		3'd4: begin
			array_muxed0 <= displays4;
		end
		3'd5: begin
			array_muxed0 <= displays5;
		end
		3'd6: begin
			array_muxed0 <= displays6;
		end
		default: begin
			array_muxed0 <= displays7;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 30'd0;
	case (grant)
		default: begin
			array_muxed1 <= picorv32_idbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 32'd0;
	case (grant)
		default: begin
			array_muxed2 <= picorv32_idbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 4'd0;
	case (grant)
		default: begin
			array_muxed3 <= picorv32_idbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		default: begin
			array_muxed4 <= picorv32_idbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		default: begin
			array_muxed5 <= picorv32_idbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 1'd0;
	case (grant)
		default: begin
			array_muxed6 <= picorv32_idbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 3'd0;
	case (grant)
		default: begin
			array_muxed7 <= picorv32_idbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed8 <= 2'd0;
	case (grant)
		default: begin
			array_muxed8 <= picorv32_idbus_bte;
		end
	endcase
end
assign uart_phy_rx = xilinxmultiregimpl0_regs1;
assign switchs_status = xilinxmultiregimpl1_regs1;
assign xilinxmultiregimpl1 = {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
assign buttons_status = xilinxmultiregimpl2_regs1;
assign xilinxmultiregimpl2 = {btnl, btnr, btnc};

always @(posedge por_clk) begin
	int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((soccontroller_bus_errors != 32'd4294967295)) begin
		if (soccontroller_bus_error) begin
			soccontroller_bus_errors <= (soccontroller_bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & (~ram_bus_ack))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & (~interface0_ram_bus_ack))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & (~interface1_ram_bus_ack))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	uart_phy_sink_ready <= 1'd0;
	if (((uart_phy_sink_valid & (~uart_phy_tx_busy)) & (~uart_phy_sink_ready))) begin
		uart_phy_tx_reg <= uart_phy_sink_payload_data;
		uart_phy_tx_bitcount <= 1'd0;
		uart_phy_tx_busy <= 1'd1;
		serial_tx <= 1'd0;
	end else begin
		if ((uart_phy_tx_clken & uart_phy_tx_busy)) begin
			uart_phy_tx_bitcount <= (uart_phy_tx_bitcount + 1'd1);
			if ((uart_phy_tx_bitcount == 4'd8)) begin
				serial_tx <= 1'd1;
			end else begin
				if ((uart_phy_tx_bitcount == 4'd9)) begin
					serial_tx <= 1'd1;
					uart_phy_tx_busy <= 1'd0;
					uart_phy_sink_ready <= 1'd1;
				end else begin
					serial_tx <= uart_phy_tx_reg[0];
					uart_phy_tx_reg <= {1'd0, uart_phy_tx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_tx_busy) begin
		{uart_phy_tx_clken, uart_phy_tx_clkphase} <= (uart_phy_tx_clkphase + uart_phy_storage);
	end else begin
		{uart_phy_tx_clken, uart_phy_tx_clkphase} <= uart_phy_storage;
	end
	uart_phy_source_valid <= 1'd0;
	uart_phy_rx_r <= uart_phy_rx;
	if ((~uart_phy_rx_busy)) begin
		if (((~uart_phy_rx) & uart_phy_rx_r)) begin
			uart_phy_rx_busy <= 1'd1;
			uart_phy_rx_bitcount <= 1'd0;
		end
	end else begin
		if (uart_phy_rx_clken) begin
			uart_phy_rx_bitcount <= (uart_phy_rx_bitcount + 1'd1);
			if ((uart_phy_rx_bitcount == 1'd0)) begin
				if (uart_phy_rx) begin
					uart_phy_rx_busy <= 1'd0;
				end
			end else begin
				if ((uart_phy_rx_bitcount == 4'd9)) begin
					uart_phy_rx_busy <= 1'd0;
					if (uart_phy_rx) begin
						uart_phy_source_payload_data <= uart_phy_rx_reg;
						uart_phy_source_valid <= 1'd1;
					end
				end else begin
					uart_phy_rx_reg <= {uart_phy_rx, uart_phy_rx_reg[7:1]};
				end
			end
		end
	end
	if (uart_phy_rx_busy) begin
		{uart_phy_rx_clken, uart_phy_rx_clkphase} <= (uart_phy_rx_clkphase + uart_phy_storage);
	end else begin
		{uart_phy_rx_clken, uart_phy_rx_clkphase} <= 32'd2147483648;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_old_trigger <= uart_tx_trigger;
	if (((~uart_tx_trigger) & uart_tx_old_trigger)) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_old_trigger <= uart_rx_trigger;
	if (((~uart_rx_trigger) & uart_rx_old_trigger)) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (uart_reset) begin
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_old_trigger <= timer_zero_trigger;
	if (((~timer_zero_trigger) & timer_zero_old_trigger)) begin
		timer_zero_pending <= 1'd1;
	end
	if ((dgt_tick_count >= 18'd199999)) begin
		dgt_tick_count <= 1'd0;
		dgt_tick <= 1'd1;
	end else begin
		dgt_tick_count <= (dgt_tick_count + 1'd1);
		dgt_tick <= 1'd0;
	end
	if (dgt_tick) begin
		if ((dgt_count >= 3'd7)) begin
			dgt_count <= 1'd0;
		end else begin
			dgt_count <= (dgt_count + 1'd1);
		end
	end
	if (ok_clear) begin
		ok_pending <= 1'd0;
	end
	ok_old_trigger <= ok_trigger;
	if (((~ok_trigger) & ok_old_trigger)) begin
		ok_pending <= 1'd1;
	end
	state <= next_state;
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done_1)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_in_w;
			end
		endcase
	end
	buttons_re <= csrbank0_in_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[2:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_color_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_figure_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_done_w;
			end
			2'd3: begin
				interface1_bank_bus_dat_r <= csrbank1_init_procesamiento0_w;
			end
			3'd4: begin
				interface1_bank_bus_dat_r <= csrbank1_ev_status_w;
			end
			3'd5: begin
				interface1_bank_bus_dat_r <= csrbank1_ev_pending_w;
			end
			3'd6: begin
				interface1_bank_bus_dat_r <= csrbank1_ev_enable0_w;
			end
		endcase
	end
	color_re <= csrbank1_color_re;
	figure_re <= csrbank1_figure_re;
	done_re <= csrbank1_done_re;
	if (csrbank1_init_procesamiento0_re) begin
		init_procesamiento_storage <= csrbank1_init_procesamiento0_r;
	end
	init_procesamiento_re <= csrbank1_init_procesamiento0_re;
	status_re <= csrbank1_ev_status_re;
	if (csrbank1_ev_pending_re) begin
		pending_r <= csrbank1_ev_pending_r;
	end
	pending_re <= csrbank1_ev_pending_re;
	if (csrbank1_ev_enable0_re) begin
		enable_storage <= csrbank1_ev_enable0_r;
	end
	enable_re <= csrbank1_ev_enable0_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[1:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_reset0_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_scratch0_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_bus_errors_w;
			end
		endcase
	end
	if (csrbank2_reset0_re) begin
		soccontroller_reset_storage <= csrbank2_reset0_r;
	end
	soccontroller_reset_re <= csrbank2_reset0_re;
	if (csrbank2_scratch0_re) begin
		soccontroller_scratch_storage[31:0] <= csrbank2_scratch0_r;
	end
	soccontroller_scratch_re <= csrbank2_scratch0_re;
	soccontroller_bus_errors_re <= csrbank2_bus_errors_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[2:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_00_w;
			end
			1'd1: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_10_w;
			end
			2'd2: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_20_w;
			end
			2'd3: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_30_w;
			end
			3'd4: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_40_w;
			end
			3'd5: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_50_w;
			end
			3'd6: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_60_w;
			end
			3'd7: begin
				interface3_bank_bus_dat_r <= csrbank3_dig_70_w;
			end
		endcase
	end
	if (csrbank3_dig_00_re) begin
		dig_0_storage[7:0] <= csrbank3_dig_00_r;
	end
	dig_0_re <= csrbank3_dig_00_re;
	if (csrbank3_dig_10_re) begin
		dig_1_storage[7:0] <= csrbank3_dig_10_r;
	end
	dig_1_re <= csrbank3_dig_10_re;
	if (csrbank3_dig_20_re) begin
		dig_2_storage[7:0] <= csrbank3_dig_20_r;
	end
	dig_2_re <= csrbank3_dig_20_re;
	if (csrbank3_dig_30_re) begin
		dig_3_storage[7:0] <= csrbank3_dig_30_r;
	end
	dig_3_re <= csrbank3_dig_30_re;
	if (csrbank3_dig_40_re) begin
		dig_4_storage[7:0] <= csrbank3_dig_40_r;
	end
	dig_4_re <= csrbank3_dig_40_re;
	if (csrbank3_dig_50_re) begin
		dig_5_storage[7:0] <= csrbank3_dig_50_r;
	end
	dig_5_re <= csrbank3_dig_50_re;
	if (csrbank3_dig_60_re) begin
		dig_6_storage[7:0] <= csrbank3_dig_60_r;
	end
	dig_6_re <= csrbank3_dig_60_re;
	if (csrbank3_dig_70_re) begin
		dig_7_storage[7:0] <= csrbank3_dig_70_r;
	end
	dig_7_re <= csrbank3_dig_70_re;
	interface4_bank_bus_dat_r <= 1'd0;
	if (csrbank4_sel) begin
		case (interface4_bank_bus_adr[1:0])
			1'd0: begin
				interface4_bank_bus_dat_r <= csrbank4_salida_w;
			end
			1'd1: begin
				interface4_bank_bus_dat_r <= csrbank4_salida1_w;
			end
			2'd2: begin
				interface4_bank_bus_dat_r <= csrbank4_salida2_w;
			end
		endcase
	end
	salida_re <= csrbank4_salida_re;
	salida1_re <= csrbank4_salida1_re;
	salida2_re <= csrbank4_salida2_re;
	interface5_bank_bus_dat_r <= 1'd0;
	if (csrbank5_sel) begin
		case (interface5_bank_bus_adr[0])
			1'd0: begin
				interface5_bank_bus_dat_r <= csrbank5_out0_w;
			end
		endcase
	end
	if (csrbank5_out0_re) begin
		leds_storage[9:0] <= csrbank5_out0_r;
	end
	leds_re <= csrbank5_out0_re;
	interface6_bank_bus_dat_r <= 1'd0;
	if (csrbank6_sel) begin
		case (interface6_bank_bus_adr[0])
			1'd0: begin
				interface6_bank_bus_dat_r <= csrbank6_direccion0_w;
			end
			1'd1: begin
				interface6_bank_bus_dat_r <= csrbank6_direccion20_w;
			end
		endcase
	end
	if (csrbank6_direccion0_re) begin
		direccion_storage[1:0] <= csrbank6_direccion0_r;
	end
	direccion_re <= csrbank6_direccion0_re;
	if (csrbank6_direccion20_re) begin
		direccion2_storage[1:0] <= csrbank6_direccion20_r;
	end
	direccion2_re <= csrbank6_direccion20_re;
	interface7_bank_bus_dat_r <= 1'd0;
	if (csrbank7_sel) begin
		case (interface7_bank_bus_adr[1:0])
			1'd0: begin
				interface7_bank_bus_dat_r <= csrbank7_distance_w;
			end
			1'd1: begin
				interface7_bank_bus_dat_r <= csrbank7_boton_cambiar_grados0_w;
			end
			2'd2: begin
				interface7_bank_bus_dat_r <= csrbank7_ultra0_w;
			end
		endcase
	end
	distance_re <= csrbank7_distance_re;
	if (csrbank7_boton_cambiar_grados0_re) begin
		boton_cambiar_grados_storage[1:0] <= csrbank7_boton_cambiar_grados0_r;
	end
	boton_cambiar_grados_re <= csrbank7_boton_cambiar_grados0_re;
	if (csrbank7_ultra0_re) begin
		ultra_storage <= csrbank7_ultra0_r;
	end
	ultra_re <= csrbank7_ultra0_re;
	interface8_bank_bus_dat_r <= 1'd0;
	if (csrbank8_sel) begin
		case (interface8_bank_bus_adr[0])
			1'd0: begin
				interface8_bank_bus_dat_r <= csrbank8_in_w;
			end
		endcase
	end
	switchs_re <= csrbank8_in_re;
	interface9_bank_bus_dat_r <= 1'd0;
	if (csrbank9_sel) begin
		case (interface9_bank_bus_adr[2:0])
			1'd0: begin
				interface9_bank_bus_dat_r <= csrbank9_load0_w;
			end
			1'd1: begin
				interface9_bank_bus_dat_r <= csrbank9_reload0_w;
			end
			2'd2: begin
				interface9_bank_bus_dat_r <= csrbank9_en0_w;
			end
			2'd3: begin
				interface9_bank_bus_dat_r <= csrbank9_update_value0_w;
			end
			3'd4: begin
				interface9_bank_bus_dat_r <= csrbank9_value_w;
			end
			3'd5: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_status_w;
			end
			3'd6: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_pending_w;
			end
			3'd7: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_enable0_w;
			end
		endcase
	end
	if (csrbank9_load0_re) begin
		timer_load_storage[31:0] <= csrbank9_load0_r;
	end
	timer_load_re <= csrbank9_load0_re;
	if (csrbank9_reload0_re) begin
		timer_reload_storage[31:0] <= csrbank9_reload0_r;
	end
	timer_reload_re <= csrbank9_reload0_re;
	if (csrbank9_en0_re) begin
		timer_en_storage <= csrbank9_en0_r;
	end
	timer_en_re <= csrbank9_en0_re;
	if (csrbank9_update_value0_re) begin
		timer_update_value_storage <= csrbank9_update_value0_r;
	end
	timer_update_value_re <= csrbank9_update_value0_re;
	timer_value_re <= csrbank9_value_re;
	timer_status_re <= csrbank9_ev_status_re;
	if (csrbank9_ev_pending_re) begin
		timer_pending_r <= csrbank9_ev_pending_r;
	end
	timer_pending_re <= csrbank9_ev_pending_re;
	if (csrbank9_ev_enable0_re) begin
		timer_enable_storage <= csrbank9_ev_enable0_r;
	end
	timer_enable_re <= csrbank9_ev_enable0_re;
	interface10_bank_bus_dat_r <= 1'd0;
	if (csrbank10_sel) begin
		case (interface10_bank_bus_adr[2:0])
			1'd0: begin
				interface10_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				interface10_bank_bus_dat_r <= csrbank10_txfull_w;
			end
			2'd2: begin
				interface10_bank_bus_dat_r <= csrbank10_rxempty_w;
			end
			2'd3: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_status_w;
			end
			3'd4: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_pending_w;
			end
			3'd5: begin
				interface10_bank_bus_dat_r <= csrbank10_ev_enable0_w;
			end
			3'd6: begin
				interface10_bank_bus_dat_r <= csrbank10_txempty_w;
			end
			3'd7: begin
				interface10_bank_bus_dat_r <= csrbank10_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= csrbank10_txfull_re;
	uart_rxempty_re <= csrbank10_rxempty_re;
	uart_status_re <= csrbank10_ev_status_re;
	if (csrbank10_ev_pending_re) begin
		uart_pending_r[1:0] <= csrbank10_ev_pending_r;
	end
	uart_pending_re <= csrbank10_ev_pending_re;
	if (csrbank10_ev_enable0_re) begin
		uart_enable_storage[1:0] <= csrbank10_ev_enable0_r;
	end
	uart_enable_re <= csrbank10_ev_enable0_re;
	uart_txempty_re <= csrbank10_txempty_re;
	uart_rxfull_re <= csrbank10_rxfull_re;
	interface11_bank_bus_dat_r <= 1'd0;
	if (csrbank11_sel) begin
		case (interface11_bank_bus_adr[0])
			1'd0: begin
				interface11_bank_bus_dat_r <= csrbank11_tuning_word0_w;
			end
		endcase
	end
	if (csrbank11_tuning_word0_re) begin
		uart_phy_storage[31:0] <= csrbank11_tuning_word0_r;
	end
	uart_phy_re <= csrbank11_tuning_word0_re;
	if (sys_rst) begin
		soccontroller_reset_storage <= 1'd0;
		soccontroller_reset_re <= 1'd0;
		soccontroller_scratch_storage <= 32'd305419896;
		soccontroller_scratch_re <= 1'd0;
		soccontroller_bus_errors_re <= 1'd0;
		soccontroller_bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		uart_phy_storage <= 32'd4947802;
		uart_phy_re <= 1'd0;
		uart_phy_sink_ready <= 1'd0;
		uart_phy_tx_clken <= 1'd0;
		uart_phy_tx_busy <= 1'd0;
		uart_phy_source_valid <= 1'd0;
		uart_phy_source_payload_data <= 8'd0;
		uart_phy_rx_clken <= 1'd0;
		uart_phy_rx_r <= 1'd0;
		uart_phy_rx_busy <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_old_trigger <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_old_trigger <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_old_trigger <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		leds_storage <= 10'd0;
		leds_re <= 1'd0;
		switchs_re <= 1'd0;
		buttons_re <= 1'd0;
		dgt_count <= 3'd0;
		dgt_tick <= 1'd0;
		dgt_tick_count <= 18'd0;
		dig_0_storage <= 8'd0;
		dig_0_re <= 1'd0;
		dig_1_storage <= 8'd0;
		dig_1_re <= 1'd0;
		dig_2_storage <= 8'd0;
		dig_2_re <= 1'd0;
		dig_3_storage <= 8'd0;
		dig_3_re <= 1'd0;
		dig_4_storage <= 8'd0;
		dig_4_re <= 1'd0;
		dig_5_storage <= 8'd0;
		dig_5_re <= 1'd0;
		dig_6_storage <= 8'd0;
		dig_6_re <= 1'd0;
		dig_7_storage <= 8'd0;
		dig_7_re <= 1'd0;
		color_re <= 1'd0;
		figure_re <= 1'd0;
		done_re <= 1'd0;
		init_procesamiento_storage <= 1'd0;
		init_procesamiento_re <= 1'd0;
		ok_pending <= 1'd0;
		ok_old_trigger <= 1'd0;
		status_re <= 1'd0;
		pending_re <= 1'd0;
		pending_r <= 1'd0;
		enable_storage <= 1'd0;
		enable_re <= 1'd0;
		distance_re <= 1'd0;
		boton_cambiar_grados_storage <= 2'd0;
		boton_cambiar_grados_re <= 1'd0;
		ultra_storage <= 1'd0;
		ultra_re <= 1'd0;
		direccion_storage <= 2'd0;
		direccion_re <= 1'd0;
		direccion2_storage <= 2'd0;
		direccion2_re <= 1'd0;
		salida_re <= 1'd0;
		salida1_re <= 1'd0;
		salida2_re <= 1'd0;
		slave_sel_r <= 4'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	xilinxmultiregimpl0_regs0 <= serial_rx;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= {sw7, sw6, sw5, sw4, sw3, sw2, sw1, sw0};
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
	xilinxmultiregimpl2_regs0 <= {btnl, btnr, btnc};
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
end

reg [31:0] mem[0:8191];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[adr];
end

assign dat_r = memdat;

initial begin
	$readmemh("mem.init", mem);
end

reg [31:0] mem_1[0:2047];
reg [10:0] memadr;
always @(posedge sys_clk) begin
	if (sram0_we[0])
		mem_1[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		mem_1[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		mem_1[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		mem_1[sram0_adr][31:24] <= sram0_dat_w[31:24];
	memadr <= sram0_adr;
end

assign sram0_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [31:0] mem_2[0:2559];
reg [11:0] memadr_1;
always @(posedge sys_clk) begin
	if (sram1_we[0])
		mem_2[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		mem_2[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		mem_2[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		mem_2[sram1_adr][31:24] <= sram1_dat_w[31:24];
	memadr_1 <= sram1_adr;
end

assign sram1_dat_r = mem_2[memadr_1];

initial begin
	$readmemh("mem_2.init", mem_2);
end

reg [9:0] storage[0:15];
reg [9:0] memdat_1;
reg [9:0] memdat_2;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	memdat_1 <= storage[uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		memdat_2 <= storage[uart_tx_fifo_rdport_adr];
end

assign uart_tx_fifo_wrport_dat_r = memdat_1;
assign uart_tx_fifo_rdport_dat_r = memdat_2;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_3;
reg [9:0] memdat_4;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	memdat_3 <= storage_1[uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		memdat_4 <= storage_1[uart_rx_fifo_rdport_adr];
end

assign uart_rx_fifo_wrport_dat_r = memdat_3;
assign uart_rx_fifo_rdport_dat_r = memdat_4;

camara camara(
	.CAM_href(cam_href),
	.CAM_pclk(cam_pclk),
	.CAM_px_data({cam_data_in7, cam_data_in6, cam_data_in5, cam_data_in4, cam_data_in3, cam_data_in2, cam_data_in1, cam_data_in0}),
	.CAM_vsync(cam_vsync),
	.clk(sys_clk),
	.init_procesamiento(init_procesamiento_storage),
	.rst(sys_rst),
	.CAM_pwdn(cam_pwdn),
	.CAM_xclk(cam_xclk),
	.VGA_B({vga_blue3, vga_blue2, vga_blue1, vga_blue0}),
	.VGA_G({vga_green3, vga_green2, vga_green1, vga_green0}),
	.VGA_Hsync_n(hsync),
	.VGA_R({vga_red3, vga_red2, vga_red1, vga_red0}),
	.VGA_Vsync_n(vsync),
	.color(color_status),
	.done(done_status),
	.figure(figure_status)
);

radar radar(
	.boton_cambiar_grados(boton_cambiar_grados_storage),
	.clk(sys_clk),
	.echo(echo),
	.ultra(ultra_storage),
	.PWM(PWM),
	.distance(distance_status),
	.done(done),
	.trigger(trigger)
);

motor motor(
	.clk(sys_clk),
	.direccion(direccion_storage),
	.direccion2(direccion2_storage),
	.rst(sys_rst),
	.A(A),
	.A1(A1),
	.B(B),
	.B1(B1),
	.C(C),
	.C1(C1),
	.D(D),
	.D1(D1)
);

infra infra(
	.clk(sys_clk),
	.entrada(entrada),
	.entrada1(entrada1),
	.entrada2(entrada2),
	.salida(salida_status),
	.salida1(salida1_status),
	.salida2(salida2_status)
);

picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd1),
	.ENABLE_COUNTERS(1'd1),
	.ENABLE_COUNTERS64(1'd1),
	.ENABLE_DIV(1'd1),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd1),
	.ENABLE_MUL(1'd1),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd1)
) picorv32 (
	.clk(sys_clk),
	.irq(picorv32_interrupt),
	.mem_rdata(picorv32_mem_rdata),
	.mem_ready(picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst | picorv32_reset))),
	.eoi(picorv329),
	.mem_addr(picorv32_mem_addr),
	.mem_instr(picorv32_mem_instr),
	.mem_la_addr(picorv322),
	.mem_la_read(picorv320),
	.mem_la_wdata(picorv323),
	.mem_la_write(picorv321),
	.mem_la_wstrb(picorv324),
	.mem_valid(picorv32_mem_valid),
	.mem_wdata(picorv32_mem_wdata),
	.mem_wstrb(picorv32_mem_wstrb),
	.pcpi_insn(picorv326),
	.pcpi_rs1(picorv327),
	.pcpi_rs2(picorv328),
	.pcpi_valid(picorv325),
	.trap(picorv32_trap)
);

endmodule
